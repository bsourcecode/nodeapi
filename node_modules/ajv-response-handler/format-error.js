function format(errors, schema){
    var err = [];
    errors.forEach(element =>{
        var resonse_json = {};
        resonse_json.field = getField(element);
        resonse_json.name=  getText(element, schema['properties']);
        resonse_json.message = formatMessage(element['message'], resonse_json.name, element['params']);
        err.push(resonse_json);
    });
    return err;
}

function getField(element){
    var field = [], temp;
    temp = element['dataPath'].replace('.', '');
    field.push(temp);
    temp = element['params']['missingProperty'] !=undefined ? element['params']['missingProperty']:'';
    field.push(temp);
    field = field.filter(el => el);
    field = field.join(".");
    return field;
}

function getText(element, schema){
    var schemaPath = element['schemaPath'], params = element['params'];
    var new_schema = Object.assign({}, schema);
    var schemaPath = schemaPath.split('/');
    schemaPath.shift();
    schemaPath.shift();
    if(params['missingProperty'] != undefined){
        if(schemaPath.length){
            schemaPath.pop();
            schemaPath.push('properties');
        }
        schemaPath.push(params['missingProperty']);
    }
    var text = '';
    for(var j = 0; j < schemaPath.length; j++){
        if(new_schema[schemaPath[j]] != undefined){
            new_schema = new_schema[schemaPath[j]];
            text = new_schema.text == undefined ? text : new_schema.text;
        }
    }
    return text;
}

function formatMessage(message, name, params = {}){
    if(params['missingProperty'] != undefined){
        message = message.replace("'"+params['missingProperty']+"'", '');
    }
    $text = name+' '+message;
    return $text.trim();
}

exports.format = format;